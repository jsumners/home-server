global
  chroot /var/lib/haproxy
  user haproxy
  group haproxy

  tune.ssl.default-dh-param 2048

  # generated 2022-10-28, Mozilla Guideline v5.6, HAProxy 2.1, OpenSSL 1.1.1k, modern configuration
  # https://ssl-config.mozilla.org/#server=haproxy&version=2.1&config=modern&openssl=1.1.1k&guideline=5.6
  ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
  ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tlsv12 no-tls-tickets
  ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
  ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tlsv12 no-tls-tickets


defaults
  mode http
  option httplog
  option dontlognull
  option forwardfor
  option http-server-close

  log global

  timeout connect 5000ms
  timeout client 50000ms
  timeout server 50000ms

  compression algo gzip
  compression type text/html text/plain text/css application/javascript

frontend proxy
  bind *:80
  bind *:443 ssl crt /opt/certs/ alpn h2,http/1.1
  # bind *:80 v6only
  # bind *:443 v6only ssl crt /opt/certs/ alpn h2,http/1.1

  # Tag requests for ACME certificate challenges
  acl acme_acl path_beg /.well-known
  # Tag requests for our local router (gateway)
  acl router_acl base_beg router
  # Tag requests for Strava activities to sqlite app
  acl sats_acl base_beg sats

  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  redirect scheme https code 308 if !{ ssl_fc } !acme_acl

  default_backend web
  use_backend acme_lego if acme_acl
  use_backend router if router_acl
  use_backend sats if sats_acl

backend web
  server server1 example.com:80

backend acme_lego
  server lego 127.0.0.1:9999

backend router
  server udm {{ unifi_dream_machine_address }}:443 ssl verify none

# This backend expects to talk to an SSH tunnel. So, on the system hosting the
# app: `ssh -R 5000:localhost:5000 home-server`
# (`<remote_port>:localhost:<local_port>`).
#
# This is not the way I want to do this. What I want is to host something
# that works like ngrok, but I can't find anything. What I want should:
#
# 1. Not need to deal with certificates in any way. I am terminating TLS with
# HAProxy.
# 2. Support a config file for both the server and the client. At a minimum,
# this would allow for setting an access token.
# 3. The server portion should provide a REST API that the client can use to
# open new tunnels under a new subdomain. I have `*.lt.smurf.pw` so the client
# should be able to ask for `foo.lt.smurf.pw` and the server will oblige.
#
# `boringproxy` comes close. But: 1. it automatically asks for new ACME certs
# for every new tunnel. 2. Tunnels have to be created through a web interface.
# 3. It requires a local OpenSSH server instead of managing the connections
# itself.
#
# I think I'll eventually just have to write it myself if I ever care enough.
# The https://github.com/anderspitman/awesome-tunneling list links to
# https://github.com/koding/tunnel which seems like it would make writing what
# I require easy-ish, but ü§∑‚Äç‚ôÇÔ∏è
backend sats
  server sats 127.0.0.1:5000
